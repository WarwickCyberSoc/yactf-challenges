from sys import exit
from cmd import Cmd
import signal
import getpass
from hashlib import sha512
title="""Welcome to StrongMan!                                                              
"""

binArt = """Type ? or help for the available commands
"""

print(title)
print(binArt)


def signal_handler(sig, frame):
    print(" ",end="")
password=""

class Terminal(Cmd):
    currentUser="guest"
    scores = {
        "Bob":20,
        "Dave":60,
        "Stacy":90,
        "Olivia":47,
        "Jim":80,
        "Naomi":12
    }
    loggedIn = False
    def __init__(self):
        self.refreshPrompt()
        Cmd.__init__(self)

    def refreshPrompt(self):
        self.prompt=f"{self.currentUser}@StrongMan$ "
    
    optcommands = {

        "admin":"Log in to admin panel",
        "whoami":"Outputs currently logged in user",
        "scores":"Show Scoreboard",
        "addweight":"Add weight to scoreboard"
    }
    def default(self,arg):
        commandRan=arg.split(" ")[0]
        print(f"No command '{commandRan}' found")
        print("Type ? or help for the available commands")
    def do_help(self,arg):
        if self.loggedIn:
            self.optcommands['flag']="Show flag"
        #put here so always prints last in menu
        self.optcommands['exit'] = "Quit the terminal"
        print("List of commands:")
        for command in self.optcommands.keys():
            print(f" - {command} ({self.optcommands[command]})")

    def do_exit(self, arg):
        exit(0)
    def do_admin(self,arg):

         
        #aDm1n_p455w0rd_x134266324
        password = getpass.getpass(prompt="Enter Password: ")
        if sha512(password.strip().encode()).hexdigest() == "b14fd041bd1796a084db310fb62dd3119bcabef1c51b0baa67ff72cfddb7c7e750b4b7c158985499ebb6059a53f363ff452efaaf24a95bcb9c67a2bfd1eec5b0":
            self.currentUser="admin"
            self.loggedIn=True
            self.refreshPrompt()
        else:
            print("INVALID PASSWORD")

    def do_scores(self,arg):
        print("\n")
        self.scores = dict(sorted(self.scores.items(),key=lambda item: item[1],reverse=True))
        mid=24
        print("Scoreboard".rjust(mid+4," "))
        print("-"*mid*2)
        for name in self.scores:
            print(f"{name.ljust((mid*2)-8,' ')} - {str(self.scores[name])} kg")
        print("\n")
    
    def do_flag(self,arg):
        if self.loggedIn:
            print("Flag: WMG{y0U_cr4Ck3D_mY_aRm()UR}")
            exit(0)
        else:
            self.default(f"flag ")
    def do_addweight(self,arg):
        name=input("Enter name: ").capitalize()
        if name in self.scores.keys():
            print("This participant already has a weight scored for this competition")
            return
        else:
            score=-1
            while True:
                try:
                    score=input("Enter weight: ")
                    score=int(score)
                except (ValueError,TypeError) as e:
                    print("You must enter a positive integer weight")
                    continue
                if score<1:
                    print("You must enter a positive integer weight")
                    continue
                self.scores[name]=score
                print("Score added")
                break

    def do_whoami(self,arg):
        print(self.currentUser)


signal.signal(signal.SIGINT,signal_handler)
signal.signal(signal.SIGQUIT,signal_handler)
# doMenu()
Terminal().cmdloop()

